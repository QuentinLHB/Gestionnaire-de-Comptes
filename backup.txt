using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Comptes
{
    public partial class frmComptes : Form
    {
        public Dictionary<string, double> dctRepartition = new Dictionary<string, double>();
        List<Budget> lesBudgets = new List<Budget>(); // Liste => BindingList <= ListBox 
        List<Compte> lesComptes = new List<Compte>();
        public string persA = "personne A"; public string persB = "personne B";
        
        private String fichierBudgets = "saveBudgets";
        private String fichierComptes = "saveComptes";

        public frmComptes()
        {
            InitializeComponent();


        }

        private void Form1_Load(object sender, EventArgs e)
        {
            //lstBudgets.DataSource = new BindingList<Budget>(lesBudgets); // Binding

            dctRepartition.Add("50 / 50", 0.5);
            dctRepartition.Add("60 / 40", 0.6);
            dctRepartition.Add("70 / 30", 0.7);


            foreach (KeyValuePair<string, double> cle in dctRepartition)
            {
                cboRepartition.Items.Add(cle.Key);
                cboRepartition.SelectedIndex = 0;
            }

            Object obj = Serialise.Recup(fichierBudgets);
            if (obj != null)
            {
                lesBudgets = (List<Budget>)obj;

                foreach (Budget budget in lesBudgets)
                {
                    lstBudgets.Items.Add(budget);
                    ajouteNouveauCompte(budget, lstBudgets.Items.Count - 1); // ppas très opti car 
                }
            }

            obj = Serialise.Recup(fichierComptes);
            if (obj != null)
            {
                lesComptes = (List<Compte>)obj;

                int k = 0;
                foreach (Compte compte in lesComptes)
                {
                    if (compte.depensesPersA != 0 || compte.depensesPersB != 0)
                    {
                        affichageCompteRempli(compte, k);
                    }
                    k++;
                }
                updateTotaux();
                updateResultat();
            }


            AccesGpbComptes();

        }


// ______________________________ BUDGETS ____________________________________

        private void btnOKBudgets_Click(object sender, EventArgs e)
        {
            Budget nouveauBudget = creationNouveauBudget();
            ajouteNouveauCompte(nouveauBudget, lstBudgets.Items.Count-1);
            resetBudget();
            AccesGpbComptes();
        }

        private Budget creationNouveauBudget()
        {
            Budget nouveauBudget = new Budget(
                nom: txtNomBudget.Text,
                repartition: dctRepartition[cboRepartition.SelectedItem.ToString()]);

            lesBudgets.Add(nouveauBudget);
            lstBudgets.Items.Add(nouveauBudget);

            return nouveauBudget;
        }



        /// <summary>
        /// Réinitialise la cellule et le focus après la validation d'un bouton.
        /// </summary>
        private void resetBudget()
        {
            txtNomBudget.Text = "";
            txtNomBudget.Focus();
        }

        private void lstBudgets_DoubleClick(object sender, EventArgs e)
        {
            Budget selectedBudget = getBudgetSelectionne(); ;
            txtNomBudget.Text = selectedBudget.nom;
            cboRepartition.SelectedItem = selectedBudget.repartition.ToString(); //ne fonctionne pas
            txtNomBudget.Focus();
            activerModeEdition(true);

        }

        private Budget getBudgetSelectionne()
        {
            return lesBudgets[lstBudgets.SelectedIndex];
        }

        private void activerModeEdition(bool modeEdition)
        {
            btnOKBudgets.Visible = !modeEdition;
            btnEdit.Visible = modeEdition;
        }

        private void btnEdit_Click(object sender, EventArgs e)
        {
            Budget selectedBudget = getBudgetSelectionne();
            selectedBudget.nom = txtNomBudget.Text;
            selectedBudget.repartition = dctRepartition[cboRepartition.SelectedItem.ToString()];
            
            lstBudgets.Items[lstBudgets.SelectedIndex] = selectedBudget;
            updateAffichageComptes(GetCompteSelectionne());
            activerModeEdition(false);
            resetBudget();
        }

        private void updateAffichageComptes(Compte compte)
        {
            if (compte.depensesPersA == 0 && compte.depensesPersB == 0)
            {
                lstComptes.Items[lstComptes.SelectedIndex] = compte;
            }

            else
            {
                affichageCompteRempli(compte, lstComptes.SelectedIndex);
            }
        }

        private void affichageCompteRempli(Compte compte, int index)
        {

            lstComptes.Items[index] =
                ($"{compte.budget.nom} : [{lblPersA.Text} {compte.depensesPersA}] [{lblPersB.Text} {compte.depensesPersB}]");

        }

        // ____________________________ COMPTES ______________________________________
        /// <summary>
        /// Ajoute les dettes de chacune des personnes dans la liste des comptes.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnOKComptes_Click(object sender, EventArgs e)
        {
            Compte compte = lesComptes[lstBudgets.SelectedIndex];

            verifieSiVide();

            affichageDesDepenses(compte);
            updateTotaux();
            updateResultat();

            try { lstBudgets.SelectedIndex++; }
            catch { }
            resetMenuCompte();

        }

        /// <summary>
        /// Gère les textBox des montants si elles sont vides.
        /// </summary>
        private void verifieSiVide()
        {
            if(txtMontantPersA.Text.Equals(""))
            {
                txtMontantPersA.Text = "0";
            }

            if (txtMontantPersB.Text.Equals(""))
            {
                txtMontantPersB.Text = "0";
            }
        }
        
        /// <summary>
        /// Affiche les dépenses entrées dans la listBox des Comptes.
        /// </summary>
        /// <param name="compte"></param>
        private void affichageDesDepenses(Compte compte)
        {
            try 
            { 
            compte.depensesPersA = Eval(txtMontantPersA.Text);
            compte.depensesPersB = Eval(txtMontantPersB.Text);
            }

            catch
            {
                MessageBox.Show("Ne saisir que des nombres ou des calculs.", "Erreur", MessageBoxButtons.OK);
            }

            updateAffichageComptes(compte);
            //lstComptes.Items[lstBudgets.SelectedIndex] =
            //    ($"{compte.budget.nom} : [{lblPersA.Text} {compte.depensesPersA}] [{lblPersB.Text} {compte.depensesPersB}]");

        }

        private void AccesGpbComptes()
        {
            if (lstBudgets.Items.Count != 0)
            {
                gpbComptes.Enabled = true;
                lstBudgets.SelectedIndex = 0;
            }

            else
            {
                gpbComptes.Enabled = false;
            }
        }

        private Compte GetCompteSelectionne()
        {
            return lesComptes[lstComptes.SelectedIndex];
        }

        // ________________________________ TOTAUX DES DETTES __________________________________________

        /// <summary>
        /// Met à jour les totaux de dettes
        /// </summary>
        /// <param name="compte"></param>
        private void updateTotaux()
        {
            double totalDettesPersA = 0;
            double totalDettesPersB = 0;
            foreach (Compte compte in lesComptes)
            {
                totalDettesPersA += compte.depensesPersB * compte.budget.repartition;
                totalDettesPersB += compte.depensesPersA * (1 - compte.budget.repartition);
            }

            lblTotalPersA.Text = totalDettesPersA.ToString();
            lblTotalPersB.Text = totalDettesPersB.ToString();

        }

        /// <summary>
        /// Met à jour le grand total
        /// </summary>
        private void updateResultat()
        {
            double resultat = double.Parse(lblTotalPersA.Text) - double.Parse(lblTotalPersB.Text);


            if (resultat > 0)
            {
                affichageResultat(persA, resultat);
            }

            if (resultat < 0)
            {
                affichageResultat(persB, -resultat);
            }
            else
            {
                lblResultat.Text = "Résultat équilibré.";
            }
        }



        private void affichageResultat(string nom, double resultat)
        {
            lblResultat.Text = ($"{nom} doit {resultat}.");
        }

        // _________________________________ GESTION DES NOMS D'UTILISATEURS _________________________
        private void txtPersA_KeyUp(object sender, KeyEventArgs e)
        {
            persA = txtPersA.Text;
            updateNomPers(persA, lblPersA, lblNomTotalPersA);

        }

        private void txtPersB_TextChanged(object sender, EventArgs e)
        {
            persB = txtPersB.Text;
            updateNomPers(persB, lblPersB, lblNomTotalPersB);
        }

        private void updateNomPers(string personne, Label lblPers, Label lblNomTotalPers)
        {
            lblPers.Text = personne + " :";
            lblNomTotalPers.Text = ($"Total dettes {personne} :");
        }

        // ________________________________________ AJOUT DE REPATITIONS ___________________________________
        /// <summary>
        /// Ajoute la repartition entrée dans la textbox au combobox.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnOKRepartition_Click(object sender, EventArgs e)
        {
            string cle = txtDividende.Text + " / " + txtDiviseur.Text;
            dctRepartition.Add(cle, double.Parse(txtDividende.Text) / 100);
            cboRepartition.Items.Add(cle);

            txtDividende.Text = "";
            txtDiviseur.Text = "";
        }

        /// <summary>
        /// Vérifie le caractère tapé pour ne garder que les chiffres et back.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtDividende_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsNumber(e.KeyChar) && e.KeyChar != (char)Keys.Back)
            {
                e.Handled = true;
            }
        }

        private void txtDividende_KeyUp(object sender, KeyEventArgs e)
        {
            try
            {
                txtDiviseur.Text = (100 - int.Parse(txtDividende.Text)).ToString();
            }

            catch
            {
                txtDiviseur.Text = "";
            }
        }

        // _____________________________ NAVIGATION _______________________________________

        private void resetMenuCompte()
        {
            txtMontantPersA.Focus();
            txtMontantPersA.Text = "";
            txtMontantPersB.Text = "";
        }

        /// <summary>
        /// Crée le miroir des budgets
        /// </summary>
        private void ajouteNouveauCompte(Budget budget, int index)
        {
            Compte compte = new Compte(budget);
            lesComptes.Add(compte);
            lstComptes.Items.Add(compte.budget.nom + " :");
            lstComptes.SelectedIndex = 0;
        }

        private void lstBudgets_SelectedIndexChanged(object sender, EventArgs e)
        {
            lstComptes.SelectedIndex = lstBudgets.SelectedIndex;
        }

        static Double Eval(String expression)
        {
            System.Data.DataTable table = new System.Data.DataTable();
            return Convert.ToDouble(table.Compute(expression, String.Empty));
        }





        private void lstComptes_SelectedIndexChanged(object sender, EventArgs e)
        {
            lstBudgets.SelectedIndex = lstComptes.SelectedIndex;
        }

        private void lstBudgets_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                
                if (MessageBox.Show("Voulez-vous vraiment supprimer le budget et son contenu ?", "Suppression", MessageBoxButtons.YesNo) == DialogResult.Yes)
                {
                    int index = lstBudgets.SelectedIndex;

                    lesBudgets.RemoveAt(index);
                    lstBudgets.Items.RemoveAt(index);

                    lesComptes.RemoveAt(index);
                    lstComptes.Items.RemoveAt(index);

                    AccesGpbComptes();

                    updateTotaux();
                    updateResultat();

                    txtNomBudget.Focus();
                }

            }
        }

        private void lstComptes_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
            int index = lstComptes.SelectedIndex;
            GetCompteSelectionne().reset();
            lstComptes.Items[index] = lesBudgets[index].nom + " :";
            updateTotaux();
            updateResultat();
            }
        }

        private void btnSauvegarde_Click(object sender, EventArgs e)
        {
            Serialise.Sauve(fichierBudgets, lesBudgets);
            Serialise.Sauve(fichierComptes, lesComptes);
        }

        private void lstComptes_DoubleClick(object sender, EventArgs e)
        {
            Compte compte = GetCompteSelectionne();
            txtMontantPersA.Text = compte.depensesPersA.ToString();
            txtMontantPersB.Text = compte.depensesPersB.ToString();
        }
    }
}
